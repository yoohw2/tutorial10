# -*- coding: utf-8 -*-
"""data_collector.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1M6c8oPdbZuqoA1CTjfCufaReEBs_aj1r

# Download dataset
"""

!wget https://ftp.ncbi.nlm.nih.gov/refseq/uniprotkb/gene_refseq_uniprotkb_collab.gz

"""# dataset shape"""

!zcat /content/drive/MyDrive/playground_test_anything/blast_mmseq_diamond/_class_material_tutorial10/gene_refseq_uniprotkb_collab.gz | head

"""# get data from NCBI and uniprot

* parsing and extracting NCBI protein accession and UniProtKB protein accession
* search from NCBI and UniProtKB with accession
* save as fasta format
"""

import gzip
from Bio import SeqIO
import requests
from Bio import Entrez
from io import StringIO


# parsing function for extracting accession
def parse_gzipped_file(filepath):
    accessions = []
    with gzip.open(filepath, 'rt') as f:  # 'rt' read text mode
        for line in f:
            if not line.startswith('#'):
                parts = line.strip().split('\t')
                ncbi_acc = parts[0]
                uniprot_acc = parts[1]
                accessions.append((ncbi_acc, uniprot_acc))
    return accessions

# file path
filepath = 'your directory'

# parsing and get acceesions
accessions = parse_gzipped_file(filepath)

Entrez.email = "your_email@example.com"  # use your email




# get protein seqs from UniProt
def fetch_uniprot_sequence(accession):
    url = f"https://www.uniprot.org/uniprot/{accession}.fasta"
    response = requests.get(url)
    if response.status_code == 200:
        fasta_data = response.text
        fasta_io = StringIO(fasta_data)
        record = SeqIO.read(fasta_io, 'fasta')
        return record
    else:
        print(f"Failed to fetch {accession}")
        return None

# get protein seqs from NCBI
def fetch_ncbi_sequence(accession):
    handle = Entrez.efetch(db="protein", id=accession, rettype="fasta", retmode="text")
    record = SeqIO.read(handle, "fasta")
    handle.close()
    return record

def fetch_sequence(accession_ncbi, accession_uni):
    try:
        # try UniProt first
        record = fetch_uniprot_sequence(accession_uni)
        if record:
            return record
    except Exception as e:
        print(f"Error fetching from UniProt for {accession_uni}: {e}")

    try:
        # try NCBI if failed with UniProt
        record = fetch_ncbi_sequence(accession_ncbi)
        if record:
            return record
    except Exception as e:
        print(f"Error fetching from NCBI for {accession_ncbi}: {e}")

    # case of both failing
    return None



# save function as a FASTA file format
def save_to_fasta(records, filename):
    with open(filename, 'w') as output_handle:
        SeqIO.write(records, output_handle, 'fasta')

records = []
for ncbi_acc, uniprot_acc in accessions:
    record = fetch_sequence(ncbi_acc, uniprot_acc)
    if record:
        records.append(record)

# records

# save as a FASTA file
fasta_filename = 'your file name'
save_to_fasta(records, fasta_filename)
print(f"Saved to {fasta_filename}")





"""# end of file

"""